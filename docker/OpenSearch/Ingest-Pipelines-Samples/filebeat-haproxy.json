PUT _ingest/pipeline/haproxy-log-pipeline
{
    "description": "Pipeline for parsing HAProxy http, tcp and default logs. Requires the geoip plugin.",
    "processors": [
      {
        "set": {
          "field": "event.ingested",
          "value": "{{_ingest.timestamp}}"
        }
      },
      {
        "grok": {
          "field": "message",
          "patterns": [
            """%{HAPROXY_DATE:haproxy.request_date} %{IPORHOST:haproxy.source} %{PROG:process.name}(?:\[%{POSINT:process.pid:long}\])?: %{GREEDYDATA} (%{IPORHOST:source.address}|-):%{POSINT:source.port:long} %{WORD} %{IPORHOST:destination.ip}:%{POSINT:destination.port:long} \(%{WORD:haproxy.frontend_name}/%{WORD:haproxy.mode}\)""",
            "(%{NOTSPACE:process.name}\\[%{NUMBER:process.pid:long}\\]: )?(%{IP:source.address}|-):%{NUMBER:source.port:long} \\[%{NOTSPACE:haproxy.request_date}\\] %{NOTSPACE:haproxy.frontend_name} %{NOTSPACE:haproxy.backend_name}/%{NOTSPACE:haproxy.server_name} (%{IPORHOST:destination.address} )?%{NUMBER:haproxy.http.request.time_wait_ms:long}/%{NUMBER:haproxy.total_waiting_time_ms:long}/%{NUMBER:haproxy.connection_wait_time_ms:long}/%{NUMBER:haproxy.http.request.time_wait_without_data_ms:long}/%{NUMBER:temp.duration:long} %{NUMBER:http.response.status_code:long} %{NUMBER:haproxy.bytes_read:long} %{NOTSPACE:haproxy.http.request.captured_cookie} %{NOTSPACE:haproxy.http.response.captured_cookie} %{NOTSPACE:haproxy.termination_state} %{NUMBER:haproxy.connections.active:long}/%{NUMBER:haproxy.connections.frontend:long}/%{NUMBER:haproxy.connections.backend:long}/%{NUMBER:haproxy.connections.server:long}/%{NUMBER:haproxy.connections.retries:long} %{NUMBER:haproxy.server_queue:long}/%{NUMBER:haproxy.backend_queue:long} (\\{%{DATA:haproxy.http.request.captured_headers}\\} \\{%{DATA:haproxy.http.response.captured_headers}\\} |\\{%{DATA}\\} )?\"%{GREEDYDATA:haproxy.http.request.raw_request_line}\"",
            """(%{NOTSPACE:process.name}\[%{NUMBER:process.pid:long}\]: )?(%{IP:source.address}|-):%{NUMBER:source.port:long} \[%{NOTSPACE:haproxy.request_date}\] %{NOTSPACE:haproxy.frontend_name}/%{NOTSPACE:haproxy.bind_name} %{GREEDYDATA:haproxy.error_message}""",
            """%{HAPROXY_DATE} %{IPORHOST:haproxy.source} (%{NOTSPACE:process.name}\[%{NUMBER:process.pid:long}\]: )?(%{IP:source.address}|-):%{NUMBER:source.port:long} \[%{NOTSPACE:haproxy.request_date}\] %{NOTSPACE:haproxy.frontend_name} %{NOTSPACE:haproxy.backend_name}/%{NOTSPACE:haproxy.server_name} %{NUMBER:haproxy.total_waiting_time_ms:long}/%{NUMBER:haproxy.connection_wait_time_ms:long}/%{NUMBER:temp.duration:long} %{NUMBER:haproxy.bytes_read:long} %{NOTSPACE:haproxy.termination_state} %{NUMBER:haproxy.connections.active:long}/%{NUMBER:haproxy.connections.frontend:long}/%{NUMBER:haproxy.connections.backend:long}/%{NUMBER:haproxy.connections.server:long}/%{NUMBER:haproxy.connections.retries:long} %{NUMBER:haproxy.server_queue:long}/%{NUMBER:haproxy.backend_queue:long}"""
          ],
          "ignore_missing": false,
          "pattern_definitions": {
            "HAPROXY_DATE": "(%{MONTHDAY}[/-]%{MONTH}[/-]%{YEAR}:%{HOUR}:%{MINUTE}:%{SECOND})|%{SYSLOGTIMESTAMP}"
          }
        }
      },
      {
        "date": {
          "target_field": "@timestamp",
          "formats": [
            "dd/MMM/yyyy:HH:mm:ss.SSS",
            "MMM dd HH:mm:ss"
          ],
          "on_failure": [
            {
              "append": {
                "value": "{{ _ingest.on_failure_message }}",
                "field": "error.message"
              }
            }
          ],
          "if": "ctx.event.timezone == null",
          "field": "haproxy.request_date"
        }
      },
      {
        "date": {
          "on_failure": [
            {
              "append": {
                "value": "{{ _ingest.on_failure_message }}",
                "field": "error.message"
              }
            }
          ],
          "if": "ctx.event.timezone != null",
          "field": "haproxy.request_date",
          "target_field": "@timestamp",
          "formats": [
            "dd/MMM/yyyy:HH:mm:ss.SSS",
            "MMM dd HH:mm:ss"
          ],
          "timezone": "{{ event.timezone }}"
        }
      },
      {
        "remove": {
          "field": "haproxy.request_date"
        }
      },
      {
        "remove": {
          "field": "message"
        }
      },
      {
        "grok": {
          "field": "haproxy.http.request.raw_request_line",
          "patterns": [
            "%{WORD:http.request.method}%{SPACE}%{URIPATHPARAM:url.original}%{SPACE}HTTP/%{NUMBER:http.version}"
          ],
          "ignore_missing": true
        }
      },
      {
        "grok": {
          "patterns": [
            "^%{IP:source.ip}$"
          ],
          "field": "source.address",
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "patterns": [
            "^%{IP:destination.ip}$"
          ],
          "on_failure": [
            {
              "set": {
                "field": "destination.domain",
                "value": "{{destination.address}}",
                "ignore_empty_value": true
              }
            }
          ],
          "field": "destination.address"
        }
      },
      {
        "geoip": {
          "target_field": "source.geo",
          "ignore_missing": true,
          "field": "source.ip"
        }
      },
      {
        "geoip": {
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true,
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as"
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "split": {
          "field": "haproxy.http.request.captured_headers",
          "separator": """\|""",
          "ignore_failure": true
        }
      },
      {
        "split": {
          "field": "haproxy.http.response.captured_headers",
          "separator": """\|""",
          "ignore_failure": true
        }
      },
      {
        "script": {
          "source": "ctx.event.duration = Math.round(ctx.temp.duration * params.scale)",
          "params": {
            "scale": 1000000
          },
          "if": "ctx.temp?.duration != null",
          "lang": "painless"
        }
      },
      {
        "remove": {
          "field": "temp.duration",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "target_field": "http.response.bytes",
          "type": "long",
          "if": "ctx.containsKey('http')",
          "field": "haproxy.bytes_read"
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{source.ip}}",
          "if": "ctx?.source?.ip != null"
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{destination.ip}}",
          "if": "ctx?.destination?.ip != null"
        }
      },
      {
        "append": {
          "if": "ctx?.destination?.domain != null",
          "field": "related.hosts",
          "value": "{{destination.domain}}"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "web",
          "if": "ctx?.haproxy?.mode == 'HTTP' || ctx?.haproxy?.http != null"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "network",
          "if": "ctx?.source.ip != null && ctx?.destination?.ip != null"
        }
      },
      {
        "append": {
          "if": "ctx?.source.ip != null && ctx?.destination?.ip != null",
          "field": "event.type",
          "value": "connection"
        }
      },
      {
        "set": {
          "if": "ctx?.http?.response?.status_code != null && ctx.http.response.status_code < 400",
          "field": "event.outcome",
          "value": "success"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "failure",
          "if": "ctx?.http?.response?.status_code != null && ctx.http.response.status_code >= 400"
        }
      },
      {
        "script": {
          "description": "This script processor iterates over the whole document to remove fields with null values.",
          "source": """void handleMap(Map map) {
  for (def x : map.values()) {
    if (x instanceof Map) {
        handleMap(x);
    } else if (x instanceof List) {
        handleList(x);
    }
  }
  map.values().removeIf(v -> v == null);
}
void handleList(List list) {
  for (def x : list) {
      if (x instanceof Map) {
          handleMap(x);
      } else if (x instanceof List) {
          handleList(x);
      }
  }
}
handleMap(ctx);
""",
          "lang": "painless"
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ]
  }