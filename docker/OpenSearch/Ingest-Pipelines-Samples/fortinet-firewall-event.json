PUT _ingest/pipeline/fortinet-firewall-event
{
    "description": "Pipeline for parsing fortinet firewall logs (event pipeline)",
    "processors": [
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "set": {
          "ignore_empty_value": true,
          "field": "event.action",
          "value": "{{fortinet.firewall.action}}"
        }
      },
      {
        "set": {
          "value": "failure",
          "if": "ctx.fortinet?.firewall?.result == 'ERROR' || ctx.fortinet?.firewall?.status == 'negotiate_error'",
          "field": "event.outcome"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "success",
          "if": "ctx.fortinet?.firewall?.result == 'OK' || ['FSSO-logon', 'auth-logon', 'FSSO-logoff', 'auth-logout'].contains(ctx.fortinet?.firewall?.action)"
        }
      },
      {
        "append": {
          "if": "['FSSO-logon', 'auth-logon'].contains(ctx.fortinet?.firewall?.action)",
          "field": "event.type",
          "value": [
            "user",
            "start"
          ],
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "allow_duplicates": false,
          "if": "['FSSO-logoff', 'auth-logout'].contains(ctx.fortinet?.firewall?.action)",
          "field": "event.type",
          "value": [
            "user",
            "end"
          ]
        }
      },
      {
        "append": {
          "value": "connection",
          "allow_duplicates": false,
          "if": "ctx.fortinet?.firewall?.subtype == 'vpn'",
          "field": "event.type"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "network",
          "allow_duplicates": false,
          "if": "ctx.fortinet?.firewall?.subtype == 'vpn'"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "info",
          "allow_duplicates": false,
          "if": "ctx.fortinet?.firewall?.action == 'perf-stats'"
        }
      },
      {
        "append": {
          "value": "host",
          "if": "ctx.fortinet?.firewall?.action == 'perf-stats'",
          "field": "event.category"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "info",
          "allow_duplicates": false,
          "if": "ctx.fortinet?.firewall?.subtype == 'update'"
        }
      },
      {
        "append": {
          "if": "ctx.fortinet?.firewall?.subtype == 'update'",
          "field": "event.category",
          "value": [
            "host",
            "malware"
          ],
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "value": "authentication",
          "allow_duplicates": false,
          "if": "ctx.fortinet?.firewall?.subtype == 'user'",
          "field": "event.category"
        }
      },
      {
        "rename": {
          "ignore_missing": true,
          "field": "fortinet.firewall.dstip",
          "target_field": "destination.ip"
        }
      },
      {
        "rename": {
          "ignore_missing": true,
          "if": "ctx.destination?.ip == null",
          "field": "fortinet.firewall.remip",
          "target_field": "destination.ip"
        }
      },
      {
        "convert": {
          "field": "fortinet.firewall.dstport",
          "target_field": "destination.port",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx.destination?.port == null",
          "field": "fortinet.firewall.remport",
          "target_field": "destination.port",
          "type": "long"
        }
      },
      {
        "convert": {
          "ignore_missing": true,
          "field": "fortinet.firewall.rcvdbyte",
          "target_field": "destination.bytes",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "fortinet.firewall.daddr",
          "target_field": "destination.address",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "target_field": "destination.address",
          "ignore_missing": true,
          "if": "ctx.destination?.address == null",
          "field": "fortinet.firewall.dst_host"
        }
      },
      {
        "rename": {
          "field": "fortinet.firewall.dst_host",
          "target_field": "destination.domain",
          "ignore_missing": true,
          "if": "ctx.destination?.address == null"
        }
      },
      {
        "convert": {
          "ignore_failure": true,
          "ignore_missing": true,
          "field": "fortinet.firewall.sentbyte",
          "target_field": "source.bytes",
          "type": "long"
        }
      },
      {
        "rename": {
          "field": "fortinet.firewall.srcip",
          "target_field": "source.ip",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "if": "ctx.source?.ip == null",
          "field": "fortinet.firewall.locip",
          "target_field": "source.ip",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "target_field": "source.mac",
          "ignore_missing": true,
          "field": "fortinet.firewall.srcmac"
        }
      },
      {
        "rename": {
          "field": "fortinet.firewall.source_mac",
          "target_field": "source.mac",
          "ignore_missing": true,
          "if": "ctx.source?.mac == null"
        }
      },
      {
        "convert": {
          "target_field": "source.port",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true,
          "field": "fortinet.firewall.srcport"
        }
      },
      {
        "convert": {
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx.source?.port == null",
          "field": "fortinet.firewall.locport",
          "target_field": "source.port"
        }
      },
      {
        "rename": {
          "field": "fortinet.firewall.user",
          "target_field": "source.user.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "target_field": "source.address",
          "ignore_missing": true,
          "field": "fortinet.firewall.saddr"
        }
      },
      {
        "rename": {
          "field": "fortinet.firewall.file",
          "target_field": "file.name",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "ignore_missing": true,
          "field": "fortinet.firewall.filesize",
          "target_field": "file.size",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "fortinet.firewall.level",
          "target_field": "log.level",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "ignore_missing": true,
          "if": "ctx.event?.code == null",
          "field": "fortinet.firewall.logid",
          "target_field": "event.code"
        }
      },
      {
        "rename": {
          "ignore_missing": true,
          "field": "fortinet.firewall.policyid",
          "target_field": "rule.id"
        }
      },
      {
        "rename": {
          "target_field": "network.direction",
          "ignore_missing": true,
          "if": "ctx.network?.direction == null",
          "field": "fortinet.firewall.dir"
        }
      },
      {
        "rename": {
          "target_field": "network.direction",
          "ignore_missing": true,
          "if": "ctx.network?.direction == null",
          "field": "fortinet.firewall.direction"
        }
      },
      {
        "script": {
          "params": {
            "outgoing": "outbound",
            "incoming": "inbound"
          },
          "source": """if (ctx.network?.direction == null) {
  return;
} def k = ctx.network?.direction.toLowerCase(); def normalized = params.get(k); if (normalized != null) {
  ctx.network.direction = normalized;
  return
} ctx.network.direction = k;""",
          "lang": "painless",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "fortinet.firewall.error_num",
          "target_field": "error.code",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "fortinet.firewall.logdesc",
          "target_field": "rule.description",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "fortinet.firewall.addr",
          "target_field": "fortinet.firewall.addrgrp",
          "if": "ctx.rule?.description == 'Dynamic address updated'",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "fortinet.firewall.url",
          "target_field": "url.path",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "fortinet.firewall.sess_duration",
          "type": "long",
          "target_field": "event.duration",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx.event?.duration == null"
        }
      },
      {
        "convert": {
          "field": "fortinet.firewall.mem",
          "type": "integer",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": [
            "fortinet.firewall.dstport",
            "fortinet.firewall.remport",
            "fortinet.firewall.rcvdbyte",
            "fortinet.firewall.sentbyte",
            "fortinet.firewall.srcport",
            "fortinet.firewall.locport",
            "fortinet.firewall.filesize",
            "fortinet.firewall.sess_duration",
            "fortinet.firewall.dir",
            "fortinet.firewall.direction"
          ],
          "ignore_missing": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ]
  }