input {
  beats {
    port => 5044
  }
}

## Add your filters / logstash plugins configuration here
## Warning, this logstash.conf is a sample with common ingests that I need normaly, remove all that you don't need

filter {
  if "cups_access" in [tags] {
 
    grok {
          match => { "message" => "%{IPORHOST:clientip} - %{GREEDYDATA:usr} \[%{HTTPDATE:@timestamp}\] \"(?:%{WORD:method} %{NOTSPACE:path}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes} %{GREEDYDATA:evento})" }
      }

  }
  
  if "cups_error" in [tags] {
 
    grok {
          match => { "message" => "%{WORD:loglevel} \[%{HTTPDATE:@timestamp}\] %{GREEDYDATA:evento}" }
      }

  }

  if "openedge_logs" in [tags] {

    grok {
          match => { "message" => "%{GREEDYDATA:@timestamp}%{SPACE}P-%{INT:pid}%{SPACE}T-%{INT:openedge-op-type}%{SPACE}%{WORD:DB-oper}%{SPACE}%{GREEDYDATA:protocol}%{SPACE}%{GREEDYDATA:session}\:%{SPACE}(%{GREEDYDATA:openedge-return-code})%{SPACE}%{GREEDYDATA:openedge-event}" }
      }

  }

  if "javapro_metrics" in [tags] {

    grok { match => { "message" => "%{TIMESTAMP_ISO8601:@timestamp}\ \-\ \-\ %{DATA:javapro_message}$" } }
   
    kv {
        source => "javapro_message"
        field_split => ","
        value_split => "="
        trim_key => " "
    }

    mutate { remove_field => [ "javapro_message", "message" ]  }

  }

  if "gitea_logs" in [tags] {

    grok{
        pattern_definitions => { "GOLANGTIME" => "(%{DATE} %{TIME})" }
        match => { "message" => "%{GOLANGTIME:@timestamp} %{GREEDYDATA:gitea-event}" }
    }
  
  }

  if "fortinet_firewall" in [tags] {

    kv {
        source => "message"
        field_split => " "
        value_split => "="
        trim_key => " "
        trim_value => "\\\""
        prefix => "fortinet_firewall_"
    }
    
    #validate eventtime field lenght to convert UNIX NS or UNIX into readable timestamp
    ruby {
        code => "event.set('eventtime_length', event.get('fortinet_firewall_eventtime').length)"
    }

    if [eventtime_length] > 11 {

      #do NS to UNIX convertion
      ruby {
        code => "
            event.set('[eventtime_ns_str]', (Time.at( (event.get('[fortinet_firewall_eventtime]')[0...10]).to_i ).to_datetime).strftime('%Y-%m-%dT%H:%M:%S.') + event.get('[fortinet_firewall_eventtime]')[-9..-1] +'Z' )
            event.set('[@timestamp]', LogStash::Timestamp.new(event.get('[eventtime_ns_str]')) )
        "
        remove_field => [ "eventtime_ns_str", "eventtime_length", "message" ]
      }

    } else {
      #do a normal date conversion
      date {
        match => ["fortinet_firewall_eventtime" , "UNIX", "ISO8601"]
        target => "@timestamp"
        remove_field => [ "eventtime_length" , "message" ]
      }

    }

    #clone { clones => [ "to_opensearch" ]}

  }

}

output {

  if "haproxy" in [@metadata][pipeline] {
    opensearch {
      hosts => "https://opensearch-node1:9200"
      user => "admin"
      password => "admin"
      ssl => true
      ssl_certificate_verification => false
      index => "filebeat-haproxy"
      action => "create"
      pipeline => "filebeat-7.12.1-haproxy-log-pipeline"
    }
  }

  else if "system-syslog" in [@metadata][pipeline] {
    opensearch {
      hosts => "https://opensearch-node1:9200"
      user => "admin"
      password => "admin"
      ssl => true
      ssl_certificate_verification => false
      index => "filebeat-system"
      action => "create"
      pipeline => "filebeat-7.12.1-system-syslog-pipeline"
    }
  }

  else if "system-auth" in [@metadata][pipeline] {
    opensearch {
      hosts => "https://opensearch-node1:9200"
      user => "admin"
      password => "admin"
      ssl => true
      ssl_certificate_verification => false
      index => "filebeat-system"
      action => "create"
      pipeline => "filebeat-7.12.1-system-auth-pipeline"
    }
  }

  else if "cups_access" in [tags] {
    opensearch {
      hosts => "https://opensearch-node1:9200"
      user => "admin"
      password => "admin"
      ssl => true
      ssl_certificate_verification => false
      index => "filebeat-cups"
      action => "create"
    }
  }

  else if "cups_error" in [tags] {
    opensearch {
      hosts => "https://opensearch-node1:9200"
      user => "admin"
      password => "admin"
      ssl => true
      ssl_certificate_verification => false
      index => "filebeat-cups"
      action => "create"
    }
  }

  # else if "gitea_logs" in [tags] {
  #   opensearch {
  #     hosts => "https://opensearch-node1:9200"
  #     hosts => "https://opensearch-node1:9200"
  #     user => "admin"
  #     password => "admin"
  #     ssl => true
  #     ssl_certificate_verification => false
  #     index => "filebeat-gitea"
  #     action => "create"
  #   }
  # }

  else if "javapro_metrics" in [tags] {
    opensearch {
      hosts => "https://opensearch-node1:9200"
      user => "admin"
      password => "admin"
      ssl => true
      ssl_certificate_verification => false
      index => "sami-metrics"
      action => "create"
    }
  }

  else if "fortinet_firewall" in [tags] {
    opensearch {
      hosts => "https://opensearch-node1:9200"
      user => "admin"
      password => "admin"
      ssl => true
      ssl_certificate_verification => false
      index => "filebeat-fortinet"
      action => "create"
    }
  }
 
  else {
    opensearch {
      hosts => "https://opensearch-node1:9200"
      user => "admin"
      password => "admin"
      ssl => true
      ssl_certificate_verification => false
      index => "filebeat-default" 
      action => "create"
    }
  }

}
